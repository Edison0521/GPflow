group 'ca.waterloo.dsg'
version '0.1.0'

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7"

    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.projectlombok:lombok:1.18.0'
    compile 'com.google.code.gson:gson:2.8.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.mockito:mockito-core:2.9.0'
}

// ANTLR4 configuration.
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [
            "-long-messages",                                   // show exception details
            "-visitor",                                         // generate parse tree visitor classes
            "-package", "ca.waterloo.dsg.graphflow.grammar"     // specify package for generated classes
    ]
}
// Add the source files generated by ANTLR4 to the gradle sourcesets.
sourceSets.main.java.srcDirs += "$buildDir/generated-src/antlr/main"

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    // Enable additional compile time warnings.
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-cast" << "-Xlint:-serial"
    // Enable incremental builds. Disable if giving errors.
    options.incremental = true
}

//在某些场合，我们不需要依赖和src打在一个jar包，我们希望有个lib,然后我们的jar运行时，自动去找依赖jar。这样，就可以不用插件了
task copyDependencies(type: Copy) {
    from configurations.runtime
    into 'build/libs/graphFlowLib'
}
jar.dependsOn(copyDependencies)

jar {
    manifest {
        attributes "Main-Class": "ca.waterloo.dsg.graphflow.runner.gpflow"
        attributes "Implementation-Title": project.name
    }

    if (!configurations.runtime.isEmpty()) {
        manifest.attributes('Class-Path': ' graphFlowLib/' + configurations.runtime.collect { it.name }.join(' graphFlowLib/'))
    }
}

